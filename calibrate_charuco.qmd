---
title: "Calibrate from Charuco videos"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
#| tags: [parameters]

parameterfile = "triangulate.yml"
```

```{python}
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
```


```{python}
import yaml
with open(parameterfile, 'r') as f:
    cfg = yaml.safe_load(f)
```

## Load parameters

**Parameter File:** `{python} os.path.abspath(parameterfile)`

```{python}
from IPython.display import Markdown
from tabulate import tabulate

tab = []
for k,v in cfg.items():
  tab.append([k, v])

Markdown(tabulate(tab,
  headers=["Parameter", "Value"]
))
```

# Run calibration


```{python}
from label3d.calibrate_charuco import do_calibration

pts, camgroup = do_calibration(cfg)
```

```{python}
from label3d.calibrate_charuco import get_triangulation_file_name

calib_file = get_triangulation_file_name(cfg, cfg['calibration_file'], withdate=False)

camgroup.dump(calib_file)
```

```{python}
from label3d.reproject import add_reprojected_points

pts = add_reprojected_points(pts, camgroup)
```

**Calibration output File:** `{python} calib_file`


# Show diagnositcs


## Overall error statistics

```{python}
ptsf = pts.loc[:, (cfg["camera_names"], slice(None))].stack(level=0).reset_index()
```

Check that one camera isn't dramatically different than the other(s)

```{python}
#| tbl-cap: Error statistics for each camera

ptsf.groupby("camera")["err"].describe()
```

```{python}
#| fig-cap: "Histograms of the reprojection errors for each camera"

fig, axes = plt.subplots(2, 1, sharex=True, sharey=True)

for ax1, cam1 in zip(axes, cfg["camera_names"]):
  iscam = ptsf['camera'] == cam1
  ax1.hist(ptsf.loc[iscam, 'err'], bins=20)
  ax1.set_title(cam1)
  ax1.set_ylabel('Number')

axes[1].set_xlabel('Reprojection error (pixels)')

plt.show()
```

## Error statistics by location

The size of the error should be fairly uniform across the field.

```{python}
#| fig-cap: "Distribution of the reprojection error across the images"

binsize = 50

xrng = np.max(ptsf["x"]) - np.min(ptsf["x"])
yrng = np.max(ptsf["y"]) - np.min(ptsf["y"])

nbinsx = int(np.floor(xrng / binsize))
nbinsy = int(np.floor(yrng / binsize))

fig, axes = plt.subplots(2, 1, sharex=True, sharey=True)

for ax1, cam1 in zip(axes, cfg["camera_names"]):
  iscam = ptsf['camera'] == cam1
  ax1.hist2d('x', 'y', weights='err', data=ptsf.loc[iscam, :], 
          bins=[nbinsx, nbinsy])
  ax1.set_title(cam1)
  ax1.set_ylabel('y (pix)')

axes[1].set_xlabel('x (pix)')

plt.show()
```